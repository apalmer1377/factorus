*factorus.txt*     Refactoring for the rest of us!

Author:         Austin Palmer
License:        MIT License
Homepage:       https://github.com/apalmer1377/factorus.git
Version:        1.5

==============================================================================
Contents                                            *factorus* *factorus-help* 

        1. Intro ............................ |factorus-intro|
        2. Commands ......................... |factorus-usage|
            2.1. Extraction ......... ....... |factorus-extract|
            2.2. Insertion .................. |factorus-insert|
            2.3. Modification ............... |factorus-modify|
        3. Configuration .................... |factorus-configure|

==============================================================================
1. Intro                                                      *factorus-intro*

Factorus is a lightweight Vim plugin for automated refactoring.  It's 
written entirely in Vimscript, so there is no need for any external packages.

==============================================================================
2. Usage                                                      *factorus-usage*

Factorus provides numerous functions for refactoring your code. The current
functions are roughly grouped into three categories: extraction, insertion,
and modification.

------------------------------------------------------------------------------
2.1 Extraction                                              *factorus-extract*

:FExtractMethod                                              *:FExtractMethod*
    Extracts a section of relatively isolated statements into a new method.
    The name of the method defaults to "newFactorusMethod", but this can be
    changed if desired (see |g:factorus_default_method|).

    NOTE: Though the function tries to be conservative in how it extracts 
    the new method, it performs no checks to make sure the resulting 
    code runs in the same way; therefore, it is hightly suggested that you 
    review the changes made before committing them.

------------------------------------------------------------------------------
2.2 Insertion                                                *factorus-insert*

:FAddParam {new_type} {new_name}                                  *:FAddParam*
    Adds a new parameter with type {new_type} and name {new_name} to 
    the function definition.

    NOTE: As of 06/16/2017, this function doesn't update any calls to the
    function in other parts of the project, as it is assumed that will be done
    manually.  This feature may be added later.

:FEncapsulate                                                  *:FEncapsulate*
    Creates getter and setter methods for the current variable, and sets 
    the variable scope to private.

------------------------------------------------------------------------------
2.3 Modification                                             *factorus-modify*

:FRenameArg {new_name}                                           *:FRenameArg*
    Renames the argument under the cursor to {new_name}.

:FRenameClass {new_name}                                       *:FRenameClass* 
    Renames the current class to {new_name}.

:FRenameField {new_name}                                       *:FRenameField*
    Renames the current variable to {new_name}.

:FRenameMethod {new_name}                                     *:FRenameMethod*
    Renames the current method to {new_name}.  

==============================================================================
3. Configuration                                          *factorus-configure*


                                                      *g:factorus_project_dir*
g:factorus_project_dir~
Default: empty

The project directory used to search for files when updating class or method
names.  If empty, the current git root directory is used.  This option is 
helpful when you have multiple projects that reference each other.

Example:
>
        let g:factorus_project_dir = '/home/factorus/workspace' 
<

                                              *g:factorus_min_extracted_lines*
g:factorus_min_extracted_lines~
Default: 2

The minimum number of lines required for a method to be extracted by
|:FExtractMethod|.  If the number of lines found is less than this number,
nothing is done.

Example:
>
        let g:factorus_min_extracted_lines = 5
<

                                                   *g:factorus_method_name*
g:factorus_method_name~
Default: 'newFactorusMethod'

The default name for a new method created by |:FExtractMethod|.

Example:
>
        let g:factorus_method_name = 'genericJavaFunction'
<

                                                    *g:factorus_ignored_files*
g:factorus_ignored_files~
Default: ['tags','cscope.out']

These files are ignored when updating class or method names.  Anything custom-
defined will be appended to the array instead of replacing it; i.e., if you 
set it to ['.*.swp'] in your vimrc file, the ignored files will be
['tags','cscope.out','.*.swp'] 

Example:
>
        let g:factorus_ignored_files = ['*.xml','*.jsp'] 
<

                                                 *g:factorus_method_threshold*
g:factorus_method_threshold~
Default: 0.9

The maximum allowable ratio of the number of lines of an extracted method to
the number of the lines of the old method when using |:FExtractMethod|. This 
is to prevent over-extraction (for instance, if the algorithm selects all but
the return statement).

Example:
>
        let g:factorus_method_threshold = 0.8
<

                                                *g:factorus_extract_heuristic*
g:factorus_extract_heuristic~
Default: 'longest'

This determines how |:FExtractMethod| decides what to extract from a method.
If this is set to 'longest', the function uses the largest block of independent
statements.  If this is set to 'greedy', the function uses the first block of
independent statements.

Example:
>
        let g:factorus_extract_heuristic = 'greedy'
<

                                                      *g:factorus_split_lines*
g:factorus_split_lines~
Default: 1

If this equals 1, then |:FExtractMethod| will split a method declaration across
multiple lines if the declaration is longer than |g:factorus_split_lines|.
Otherwise, the declaration will be put onto a single line.

Example:
>
        let g:factorus_split_lines = 0
<

                                                      *g:factorus_line_length*
g:factorus_line_length~
Default: 125

If |g:factorus_split_lines| is 1, this determines the length at which a method
declaration is split.

Example:
>
        let g:factorus_line_length = 150
<

==============================================================================
vim: tw=78 ts=8 sw=4 sts=4 et ft=help
