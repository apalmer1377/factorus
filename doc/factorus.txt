*factorus.txt*     Refactoring for the rest of us!

Author:         Austin Palmer
License:        MIT License
Homepage:       https://github.com/apalmer1377/factorus.git
Version:        1.0

==============================================================================
Contents                                            *factorus* *factorus-help* 

        1. Intro ............................ |factorus-intro|
        2. Commands ......................... |factorus-usage|
            2.1. Extraction ......... ....... |factorus-extract|
            2.2. Insertion .................. |factorus-insert|
            2.3. Modification ............... |factorus-modify|
        3. Configuration .................... |factorus-configure|

==============================================================================
1. Intro                                                      *factorus-intro*

Factorus is a lightweight Vim plugin for refactoring Git projects.  It's 
written entirely in Vimscript, so there is no need for any external packages.

==============================================================================
2. Usage                                                      *factorus-usage*

Factorus provides numerous functions for refactoring your code. The current
functions are roughly grouped into three categories: extraction, insertion,
and modification.

------------------------------------------------------------------------------
2.1 Extraction                                              *factorus-extract*

:FExtractMethod                                              *:FExtractMethod*
    Extracts a section of relatively isolated statements into a new method.
    The name of the method defaults to "newFactorusMethod," and so should 
    probably be changed afterwards.

    NOTE: Though the function tries to be conservative in how it extracts 
    the new method, it still performs no checks to make sure the resulting 
    code runs in the same way; therefore, I highly suggest you review the 
    changes made.

------------------------------------------------------------------------------
2.2 Insertion                                                *factorus-insert*

:FAddParam {new_type} {new_name}                                  *:FAddParam*
    Adds a new parameter with type {new_type} and name {new_name} to 
    the function definition.

    NOTE: As of 06/16/2017, this function doesn't update any calls to the
    function in other parts of the project, as it is assumed that will be done
    manually.  This feature may be added later.

:FEncapsulate                                                  *:FEncapsulate*
    Creates getter and setter methods for the current variable, and sets 
    the variable scope to private.

------------------------------------------------------------------------------
2.3 Modification                                             *factorus-modify*

:FRenameArg {new_name}                                           *:FRenameArg*
    Renames the argument under the cursor to {new_name}.

:FRenameClass {new_name}                                       *:FRenameClass* 
    Renames the current class to {new_name}.

:FRenameField {new_name}                                       *:FRenameField*
    Renames the current variable to {new_name}.

:FRenameMethod {new_name}                                     *:FRenameMethod*
    Renames the current method to {new_name}.  

==============================================================================
3. Configuration                                          *factorus-configure*

                                                      *g:factorus_project_dir*
g:factorus_project_dir~
Default: empty

The project directory used to search for files when updating class or method
names.  If empty, the current git root directory is used.  This option is 
helpful when you have multiple projects that reference each other.

Example:
>
        let g:factorus_project_dir = '/home/factorus/workspace' 
<

                                                    *g:factorus_ignored_files*
g:factorus_ignored_files~
Default: ['tags','cscope.out']

These files are ignored when updating class or method names.  Anything custom-
defined will be appended to the array instead of replacing it; i.e., if you 
set it to ['.*.swp'] in your vimrc file, the ignored files will be
['tags','cscope.out','.*.swp'] 

Example:
>
        let g:factorus_ignored_files = ['*.xml','*.jsp'] 
<

==============================================================================
vim: tw=78 ts=8 sw=4 sts=4 et ft=help
